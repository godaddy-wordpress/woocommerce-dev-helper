<?php
/**
 * WooCommerce Dev Helper
 *
 * This source file is subject to the GNU General Public License v3.0
 * that is bundled with this package in the file license.txt.
 * It is also available through the world-wide-web at this URL:
 * http://www.gnu.org/licenses/gpl-3.0.html
 * If you did not receive a copy of the license and are unable to
 * obtain it through the world-wide-web, please send an email
 * to license@skyverge.com so we can send you a copy immediately.
 *
 * @author    SkyVerge
 * @copyright Copyright (c) 2015-2018, SkyVerge, Inc.
 * @license   http://www.gnu.org/licenses/gpl-3.0.html GNU General Public License v3.0
 */

namespace SkyVerge\WooCommerce\Dev_Helper\Tools\Memberships;

defined( 'ABSPATH' ) or exit;

use SkyVerge\WooCommerce\PluginFramework\v5_2_0 as Framework;

/**
 * Memberships Bulk Generator.
 *
 * Tool to generate membership objects in bulk.
 *
 * @see Bulk_Destroyer counterpart
 *
 * @since 1.0.0
 *
 * @method \stdClass update_job( $job )
 */
class Bulk_Generator extends Framework\SV_WP_Background_Job_Handler {


	/** @var string the option key used to store object IDs generated by this background job */
	private $generated_objects_ids_option_key = 'wc_dev_helper_memberships_bulk_generated_objects';


	/**
	 * Background job constructor.
	 *
	 * @since 1.0.0
	 */
	public function __construct() {

		$this->prefix   = 'wc_dev_helper';
		$this->action   = 'memberships_bulk_generation';
		$this->data_key = 'members_to_generate';

		parent::__construct();
	}


	/**
	 * Returns an array of object keys used in the job.
	 *
	 * Each key should have a corresponding array of object IDs to record objects being created while the job is running.
	 *
	 * @since 1.0.0
	 *
	 * @return string[]
	 */
	public function get_objects_keys() {

		// deletion will later follow the array key order:
		return array(
			'memberships',
			'posts',
			'categories',
			'products',
			'product_cats',
			'orders',
			'subscriptions',
			'plans',
			'users',
		);
	}


	/**
	 * Returns an associative array of generated object IDs.
	 *
	 * @since 1.0.0
	 *
	 * @return array
	 */
	public function get_generated_objects_ids() {

		return get_option( $this->generated_objects_ids_option_key, array() );
	}


	/**
	 * Checks whether there are object that have been generated.
	 *
	 * @since 1.0.0
	 *
	 * @return bool
	 */
	public function has_generated_object_ids() {

		$objects = $this->get_generated_objects_ids();

		return ! empty( $objects );
	}


	/**
	 * Saves generated object IDs to an option.
	 *
	 * @since 1.0.0
	 *
	 * @param array|\stdClass $data associative array
	 * @return bool success
	 */
	public function set_generated_objects_ids( $data ) {

		$raw_data       = ! empty( $data ) ? (array) $data : null;
		$validated_data = array();

		if ( ! empty( $raw_data ) ) {

			$valid_keys = $this->get_objects_keys();

			foreach ( $raw_data as $object_name => $object_ids ) {

				$object_ids = (array) $object_ids;

				if ( in_array( $object_name, $valid_keys, true ) ) {

					$validated_data[ $object_name ] = array_unique( array_map( 'absint', $object_ids ) );
				}
			}
		}

		return update_option( $this->generated_objects_ids_option_key, $validated_data ) && ! empty( $validated_data );
	}


	/**
	 * Deletes the option that stores all the generated objects IDs.
	 *
	 * @since 1.0.0
	 *
	 * @return bool success
	 */
	public function delete_generated_objects_ids() {

		return delete_option( $this->generated_objects_ids_option_key );
	}


	/**
	 * Creates a new job.
	 *
	 * @since 1.0.0
	 *
	 * @param array $args array of arguments
	 * @return \stdClass
	 */
	public function create_job( $args ) {

		$existing = $this->get_generated_objects_ids();
		$objects  = array();

		foreach ( $this->get_objects_keys() as $key ) {
			$objects[ $key ] = ! empty( $existing[ $key ] ) ? $existing[ $key ] : array();
		}

		$args = wp_parse_args( $args, array(
			'members_to_generate'      => array(),
			'min_memberships_per_user' => isset( $args['min_memberships_per_user'] ) ? max( 0, (int) $args['min_memberships_per_user'] ) : 1,
			'max_memberships_per_user' => isset( $args['max_memberships_per_user'] ) ? max( 1, (int) $args['max_memberships_per_user'] ) : 3,
			'objects'                  => $objects,
		) );

		return parent::create_job( $args );
	}


	/**
	 * Completes the job and saves the created object IDs inside an option.
	 *
	 * @since 1.0.0
	 *
	 * @param false|object|\stdClass $job job object
	 * @return \stdClass
	 */
	public function complete_job( $job ) {

		$this->save_generated_object_ids( $job );

		return parent::complete_job( $job );
	}


	/**
	 * Deletes the job, but saves the created object IDs first.
	 *
	 * @since 1.0.0
	 *
	 * @param \stdClass $job job object
	 */
	public function delete_job( $job ) {

		$this->save_generated_object_ids( $job );

        parent::delete_job( $job );
	}


	/**
	 * Saves generated object IDs (helper method).
	 *
	 * @since 1.0.0
	 *
	 * @param false|\stdClass $job job object
	 * @return bool
	 */
	private function save_generated_object_ids( $job ) {

		$success = false;

		if ( is_object( $job ) ) {

			$option_data     = array();
			$created_objects = isset( $job->objects ) ? (array) $job->objects : array();

			if ( ! empty( $created_objects ) ) {
				foreach ( $created_objects as $object_name => $object_ids ) {
					$option_data[ $object_name ] = (array) $object_ids;
				}
			}

			$success = $this->set_generated_objects_ids( $option_data );
		}

		return $success;
	}


	/**
	 * Processes a job.
	 *
	 * Implements parent method, but with some minor difference.
	 * For example, the processed item updates the job object.
	 * The results will be used at the end for storing the generated object IDs.
	 *
	 * @since 1.0.0
	 *
	 * @param \stdClass $job job object
	 * @param int $items_per_batch number of items to process in a single request (defaults to unlimited)
	 * @return \stdClass $job
	 * @throws Framework\SV_WC_Plugin_Exception when job data is incorrect or an error occurred
	 */
	public function process_job( $job, $items_per_batch = null ) {

		if ( ! $this->start_time ) {
			$this->start_time = time();
		}

		// indicates that the job has started processing
		if ( 'processing' !== $job->status ) {

			$job->status                = 'processing';
			$job->started_processing_at = current_time( 'mysql' );

			$job = $this->update_job( $job );
		}

		$data_key = $this->data_key;

		if ( ! isset( $job->{$data_key} ) ) {
			throw new Framework\SV_WC_Plugin_Exception( sprintf( __( 'Job data key "%s" not set', 'woocommerce-dev-helper' ), $data_key ) );
		}

		if ( ! is_array( $job->{$data_key} ) ) {
			throw new Framework\SV_WC_Plugin_Exception( sprintf( __( 'Job data key "%s" is not an array', 'woocommerce-dev-helper' ), $data_key ) );
		}

		$data = $job->{$data_key};

		$job->total = count( $data );

		// progress indicates how many items have been processed, it
		// does NOT indicate the processed item key in any way
		if ( ! isset( $job->progress ) ) {
			$job->progress = 0;
		}

		// skip already processed items
		if ( $job->progress && ! empty( $data ) ) {
			$data = array_slice( $data, $job->progress, null, true );
		}

		// loop over unprocessed items and process them
		if ( ! empty( $data ) ) {

			$processed       = 0;
			$items_per_batch = (int) $items_per_batch;

			foreach ( $data as $item ) {

				// process the item (may throw exception)
				$job = $this->process_item( $item, $job );

				$processed++;
				$job->progress++;

				// update job progress
				$job = $this->update_job( $job );

				// job limits reached
				if ( ( $items_per_batch && $processed >= $items_per_batch ) || $this->time_exceeded() || $this->memory_exceeded() ) {
					break;
				}
			}
		}

		// complete current job
		if ( $job->progress >= count( $job->{$data_key} ) ) {
			$job = $this->complete_job( $job );
		}

		return $job;
	}


	/**
	 * Processes an item and creates a user membership assigned to a user.
	 *
	 * This may trigger a cascade of objects that need to be created.
	 * For example, to create a user membership, an user must exist first.
	 * A plan to be assigned must exist as well. A plan contains references to other WordPress/WooCommerce objects and so on...
	 *
	 * @since 1.0.0
	 *
	 * @param string $user_login item to process
	 * @param \stdClass $job job object
	 * @return \stdClass modified job object
	 */
	public function process_item( $user_login, $job ) {

		return $this->create_user_membership( $this->get_user( $user_login ), $job );
	}


	/**
	 * Creates a user membership for a user.
	 *
	 * Membership details and plan assignment are randomly chosen.
	 *
	 * @since 1.0.0
	 *
	 * @param \WP_User $user user object
	 * @param \stdClass $job job object
	 * @return \stdClass $job updated job object with generated object IDs
	 */
	private function create_user_membership( $user, $job ) {

		if ( $user instanceof \WP_User ) {

			// record the user ID
			$job = $this->record_object_id( $job, 'users', $user->ID );

			// each user gets from 0 to n memberships randomly
			$min_plans  = isset( $job->min_memberships_per_user ) && is_numeric( $job->min_memberships_per_user ) ? max( 0, (int) $job->min_memberships_per_user ) : 1;
			$max_plans  = isset( $job->max_memberships_per_user ) && is_numeric( $job->max_memberships_per_user ) ? max( 1, (int) $job->min_memberships_per_user ) : 3;
			$plan_slugs = $this->get_membership_plans_slugs();
			$plan_slugs = array_unique( array_rand( array_combine( $plan_slugs, $plan_slugs ), mt_rand( $min_plans, $max_plans ) ) );

			if ( ! empty( $plan_slugs ) && is_array( $plan_slugs ) )  {

				foreach ( $plan_slugs as $plan_slug ) {

					// unless previously generated, this may also trigger a plan creation, with a cascade of objects attached to it
					if ( $membership_plan = $this->get_membership_plan( $plan_slug ) ) {

						// stores a record of new objects created during plan creation
						$job = $this->record_objects_ids( $membership_plan, $job );

						// do not use `wc_memberships_create_user_membership()` to reduce a bit of overhead
						$post_id = wp_insert_post( array(
							'post_parent'    => $membership_plan->get_id(),
							'post_author'    => $user->ID,
							'post_type'      => 'wc_user_membership',
							'post_status'    => 'wcm-active',
							'comment_status' => 'open',
						) );

						if ( is_numeric( $post_id ) ) {

							// record the user membership ID just created
							$job = $this->record_object_id( $job, 'memberships', $post_id );

							$user_membership = new \WC_Memberships_User_Membership( $post_id );

							$user_membership->add_note( __( 'Membership automatically generated for testing purposes.', 'woocommerce-dev-helper' ) );

							$now = current_time( 'timestamp', true );

							// membership start dates can be randomly generated
							if ( $user_membership->get_plan()->is_access_length_type( 'fixed' ) ) {
								$start_time = mt_rand( $now - YEAR_IN_SECONDS, $now + MONTH_IN_SECONDS );
							} else {
								$start_time = mt_rand( $now - MONTH_IN_SECONDS, max( $now, $user_membership->get_plan()->get_access_start_date( 'timestamp' ) ) );
							}

							// set dates and expiration events
							$user_membership->set_start_date( date( 'Y-m-d H:i:s', $start_time ) );
							$user_membership->set_end_date( $user_membership->get_end_date( 'timestamp' ) );

							// some memberships will be randomly paused, others may be delayed, a few less may be cancelled
							if ( $user_membership->is_active() && 'delayed' !== $user_membership->get_status() ) {

								$random_number = mt_rand( 1, 25 );

								if ( 1 === $random_number ) {
									$user_membership->set_cancelled_date( mt_rand( $now, max( $now, $user_membership->get_start_date( 'timestamp' ) ) ) );
									$user_membership->cancel_membership( __( 'Membership randomly cancelled during automatic bulk generation.', 'woocommerce-dev-helper' ) );
								} elseif ( $random_number > 23 ) {
									$user_membership->set_paused_date( mt_rand( $now, max( $now, $user_membership->get_start_date( 'timestamp' ) ) ) );
									$user_membership->pause_membership( __( 'Membership randomly paused during automatic bulk generation.', 'woocommerce-dev-helper' ) );
								}
							}

							// if it's a purchased membership, create an associated order
							if ( $membership_plan->is_access_method( 'purchase' ) ) {

								$user_membership->set_product_id( current( $membership_plan->get_product_ids() ) );

								if ( $order = $this->get_order( $user_membership ) ) {

									$user_membership->set_order_id( $order->get_id() );

									// record the order ID to the job data for later deletion
									$job = $this->record_object_id( $job, 'orders', $order->get_id() );
								}
							}
						}
					}
				}
			}
		}

		return $job;
	}


	/**
	 * Returns a customer user, or creates one if not found.
	 *
	 * @since 1.0.0
	 *
	 * @param $which_user
	 * @return bool|null|\WP_User
	 */
	private function get_user( $which_user ) {

		$login = $this->add_prefix( $which_user );
		$user  = get_user_by( 'login', $login );

		if ( ! $user ) {
			$user = $this->create_user( $which_user );
		}

		return $user;
	}


	/**
	 * Creates a user customer.
	 *
	 * @since 1.0.0
	 *
	 * @param string $user_login user login slug
	 * @return null|\WP_User
	 */
	private function create_user( $user_login ) {

		add_filter( 'wc_memberships_grant_access_to_free_membership', array( $this, 'do_not_grant_free_memberships_automatically' ), 999 );

		$user  = null;
		$login = $this->add_prefix( $user_login );
		$user  = wp_insert_user( array(
			// the login and password will match for every user
			'user_login' => $login,
			'user_pass'  => $login,
			// e.g. `wc_dev_helper_user_123@example.com`
			'user_email' => str_replace( array( '-', ' ' ), '_', trim( "{$login}@example.com" ) ),
			'role'       => 'customer',
		) );

		if ( is_numeric( $user ) ) {
			$user = get_user_by( 'id', (int) $user );
		}

		remove_filter( 'wc_memberships_grant_access_to_free_membership', array( $this, 'do_not_grant_free_memberships_automatically' ), 999 );

		return $user instanceof \WP_User ? $user : null;
	}


	/**
	 * Callback for not granting a free membership when creating a user.
	 *
	 * This is because free memberships are rather created programmatically.
	 * The user is not given access to other plans that exist outside those created by the generator.
	 *
	 * @internal
	 *
	 * @since 1.0.0
	 *
	 * @return false
	 */
	public function do_not_grant_free_memberships_automatically() {

		return false;
	}


	/**
	 * Returns slugs of all users to be generated in a process.
	 *
	 * @see AJAX::start_bulk_generate_memberships()
	 *
	 * @since 1.0.0
	 *
	 * @param int $limit maximum number of users generated
	 * @return string[] array of user slugs
	 */
	public function generate_users_slugs( $limit ) {

		$users = array();

		for ( $i = 1; $i <= $limit; $i++ ) {

			// pads the user $id string so it stays alphabetical
			$id = str_pad( (string) $i, max( 1, strlen( (string) $limit ) ), '0', STR_PAD_LEFT );

			// eg. `wc_dev_helper_user_00123` when $limit is 10000
			$users[] = $this->add_prefix( "user_{$id}" );
		}

		return $users;
	}


	/**
	 * Returns a membership plan.
	 *
	 * May create the plan if not found, then return it.
	 *
	 * @since 1.0.0
	 *
	 * @param string $which_plan membership plan slug
	 * @return null|\WC_Memberships_Integration_Subscriptions_Membership_Plan|\WC_Memberships_Membership_Plan
	 */
	private function get_membership_plan( $which_plan ) {

		$plan      = null;
		$plan_data = $this->get_membership_plan_data( $which_plan );
		$plan_slug = $this->add_prefix( $which_plan );

		if ( ! empty( $plan_data ) ) {

			$plan = wc_memberships_get_membership_plan( $plan_slug );

			// check if plan exists, or create it
			if ( empty( $plan ) ) {
				$plan = $this->create_membership_plan( $which_plan );
			// if found, ensures the plan slug matches the requested one
			} elseif ( $plan->get_slug() !== $plan_slug ) {
				$plan = null;
			}
		}

		return $plan instanceof \WC_Memberships_Membership_Plan ? $plan : null;
	}


	/**
	 * Creates a membership plan.
	 *
	 * @since 1.0.0
	 *
	 * @param string $which_plan plan slug
	 * @return null|\WC_Memberships_Membership_Plan|\WC_Memberships_Integration_Subscriptions_Membership_Plan
	 */
	private function create_membership_plan( $which_plan ) {

		$plan      = null;
		$plan_slug = $this->add_prefix( $which_plan );
		$plan_data = $this->get_membership_plan_data( $which_plan );

		if ( is_array( $plan_data ) && isset( $plan_data['post_title'] ) ) {

			$post_id = wp_insert_post( array(
				'post_author' => get_current_user_id(),
				'post_type'   => 'wc_membership_plan',
				'post_status' => 'publish',
				'post_name'   => sanitize_text_field( $plan_slug ),
				'post_title'  => sanitize_text_field( $plan_data['post_title'] ),
			) );

			if ( is_numeric( $post_id ) ) {

				$plan   = new \WC_Memberships_Membership_Plan( $post_id );
				$access = isset( $plan_data['access_method'] ) ? $plan_data['access_method'] : 'manual-only';
				$length = isset( $plan_data['access_length'] ) ? $plan_data['access_length'] : 'unlimited';

				// set and validate access length
				if ( is_array( $length ) ) {
					$plan->set_access_start_date( date( 'Y-m-d H:i:s', (int) key( $length ) ) );
					$plan->set_access_end_date( date( 'Y-m-d H:i:s', (int) current( $length ) ) );
				} elseif ( 'unlimited' !== $length && is_string( $length ) ) {
					$plan->set_access_length( $length );
				}

				// set and validate access method
				$plan->set_access_method( $access );

				// set access products
				if ( 'purchase' === $plan->get_access_method() ) {

					// one product is picked at random to be the access product
					$product_slugs  = array_keys( $this->get_products_data() );
					$random_product = array_rand( array_combine( $product_slugs, $product_slugs ), 1 );
					$access_product = $this->get_product( $random_product );

					// sanity check: revert to manual-only in case of errors
					if ( ! $access_product instanceof \WC_Product ) {
						$plan->set_access_method( 'manual-only' );
					} else {
						$plan->set_product_ids( $access_product->get_id() );
					}
				}

				// set plan rules
				$this->create_membership_plan_rules( $plan, $plan->get_rules() );
			}
		}

		return $plan;
	}


	/**
	 * Returns plan data given a membership plan slug.
	 *
	 * @since 1.0.0
	 *
	 * @param string $which_plan membership plan slug
	 * @return null|array plan data if data exists
	 */
	public function get_membership_plan_data( $which_plan ) {

		$plan = $this->remove_prefix( $which_plan );
		$data = $this->get_membership_plans_data();

		return ! empty( $data[ $plan ] ) ? $data[ $plan ] : array();
	}


	/**
	 * Returns data for plans to be created in bulk.
	 *
	 * @since 1.0.0
	 *
	 * @return array associative array of plans data with slugs shorthands for keys
	 */
	private function get_membership_plans_data() {

		$now = current_time( 'timestamp', true );

		return array(
			// a manually assigned plan
			'test-membership-plan-a' => array(
				'post_title'    => __( 'Test Membership Plan A (manual only, unlimited)', 'woocommerce-dev-helper' ),
				'access_method' => 'manual-only',
				'access_length' => 'unlimited',
			),
			// a signup-access membership plan
			'test-membership-plan-b' => array(
				'post_title'    => __( 'Test Membership Plan B (signup)', 'woocommerce-dev-helper' ),
				'access_method' => 'signup',
				'access_length' => '1 months',
			),
			// a plan with product(s) to purchase to get access to (specific length)
			'test-membership-plan-c' => array(
				'post_title'    => __( 'Test Membership Plan C (purchase, specific)', 'woocommerce-dev-helper' ),
				'access_method' => 'purchase',
				'access_length' => '1 years'
			),
			// a plan with product(s) to purchase to get access to (fixed length)
			'test-membership-plan-d' => array(
				'post_title'    => __( 'Test Membership Plan C (purchase, fixed)', 'woocommerce-dev-helper' ),
				'access_method' => 'purchase',
				'access_length' => array( strtotime( '-1 months', $now ) => strtotime( '+11 months', $now ) ),
			),
		);
	}


	/**
	 * Returns an array of plan slugs created by the bulk generator.
	 *
	 * @since 1.0.0
	 *
	 * @return string[] array of plan slugs
	 */
	public function get_membership_plans_slugs() {

		$plans = array();
		$slugs = array_keys( $this->get_membership_plans_data() );

		foreach ( $slugs as $slug ) {
			$plans[] = $this->add_prefix( $slug );
		}

		return $plans;
	}


	/**
	 * Returns the order (to be) associated with a user membership.
	 *
	 * @since 1.0.0
	 *
	 * @param \WC_Memberships_User_Membership $user_membership the related user membership (purchase access)
	 * @return null|\WC_Order
	 */
	private function get_order( \WC_Memberships_User_Membership $user_membership ) {

		if ( ! $user_membership->get_order_id() ) {
			$order = $this->create_order( $user_membership );
		} else {
			$order = $user_membership->get_order();
		}

		return $order instanceof \WC_Order ? $order : null;
	}


	/**
	 * Creates an order object.
	 *
	 * @since 1.0.0
	 *
	 * @param \WC_Memberships_User_Membership $user_membership the related membership (purchase access)
	 * @return null|\WC_Order
	 */
	private function create_order( \WC_Memberships_User_Membership $user_membership ) {

		$order = null;

		if ( $product = $user_membership->get_product() ) {

			// insert the order to database, copy dates from membership
			$start_gmt = $user_membership->get_start_date();
			$start     = $user_membership->get_local_start_date();
			$order_id  = wp_insert_post( array(
				'post_author'   => get_current_user_id(),
				'post_type'     => 'shop_order',
				'post_status'   => 'wc-completed',
				'ping_status'   => 'closed',
				'post_password' => uniqid( 'order_', false ),
				'post_excerpt'  => '',
				'post_date'     => $start,
				'post_date_gmt' => $start_gmt,
			) );

			if ( $order_id > 0 ) {

				// build the order
				$order = new \WC_Order( $order_id );
				$price = $product->get_price();
				$data  = array(
					'set_id'             => $order_id,
					'set_customer_id'    => $user_membership->get_user_id(),
					'set_date_paid'      => $start_gmt,
					'set_date_completed' => $start_gmt,
					'set_total'          => $price,
				);

				// set basic order props
				foreach ( $data as $method => $set_value ) {
					try {
						$order->$method( $set_value );
					} catch ( \Exception $e ) {
						wc_dev_helper()->log( $e->getMessage() );
					}
				}

				// make a single order item containing the product that grants access
				$order_item_product = new \WC_Order_Item_Product( array() );

				// set order item props
				$order_item_product->set_name( $product->get_formatted_name() );
				$order_item_product->set_product( $product );
				$order_item_product->set_product_id( $product->get_id() );
				$order_item_product->set_quantity( 1 );
				$order_item_product->set_subtotal( $price );
				$order_item_product->set_total( $price );
				// save the order item
				$order_item_product->save();
				$order_item_product->save_meta_data();

				// add the item and complete the order
				$order->add_item( $order_item_product );
				$order->add_order_note( __( 'Order automatically created while bulk generating memberships', 'woocommerce-dev-helper' ) );

				// save the order
				$order->save();
				$order->save_meta_data();

				// set the membership ID on the newly created order
				wc_memberships_set_order_access_granted_membership( $order->get_id(), $user_membership );
			}
		}

		return $order;
	}


	/**
	 * Creates rules for a membership plan.
	 *
	 * @since 1.0.0
	 *
	 * @param \WC_Memberships_Membership_Plan|\WC_Memberships_Integration_Subscriptions_User_Membership $plan plan object
	 * @param \WC_Memberships_Membership_Plan_Rule[] array of rules (default empty array as there are no rules yet)
	 */
	private function create_membership_plan_rules( $plan, array $rules ) {

		$rules = $this->create_membership_plan_content_access_rules( $plan, $rules );
		$rules = $this->create_membership_plan_products_access_rules( $plan, $rules );
		$rules = $this->create_membership_plan_products_discount_rules( $plan, $rules );

		$plan->set_rules( $rules );
		$plan->compact_rules();
	}


	/**
	 * Creates content access rules for a membership plan.
	 *
	 * @since 1.0.0
	 *
	 * @param \WC_Memberships_Membership_Plan|\WC_Memberships_Integration_Subscriptions_User_Membership $plan plan object
	 * @param \WC_Memberships_Membership_Plan_Rule[] array of rules (default empty array as there are no rules yet)
	 * @return \WC_Memberships_Membership_Plan_Rule[]
	 */
	private function create_membership_plan_products_access_rules( $plan, array $rules ) {

		// exclude products that grant access
		$access_products = $plan->get_product_ids();
		$product_names   = array_keys( $this->get_products_data() );
		$some_products   = array_rand( array_combine( $product_names, $product_names ), mt_rand( 1, 20 ) );

		foreach ( $some_products as $product_name ) {

			$product = $this->get_product( $product_name );

			if ( $product && ! in_array( $product->get_id(), $access_products, false ) ) {

				$rules[] = new \WC_Memberships_Membership_Plan_Rule( array(
					'id'                 => uniqid( 'rule_', false ),
					'membership_plan_id' => $plan->get_id(),
					'rule_type'          => 'product_restriction',
					'access_type'        => 0 === mt_rand( 0, 1 ) ? 'view' : 'purchase',
					'content_type'       => 'post_type',
					'content_type_name'  => 'product',
					'object_ids'         => array( $product->get_id() ),
				) );
			}
		}

		return $rules;
	}


	/**
	 * Creates product discount rules for a membership plan.
	 *
	 * @since 1.0.0
	 *
	 * @param \WC_Memberships_Membership_Plan|\WC_Memberships_Integration_Subscriptions_User_Membership $plan plan object
	 * @param \WC_Memberships_Membership_Plan_Rule[] array of rules (default empty array as there are no rules yet)
	 * @return \WC_Memberships_Membership_Plan_Rule[]
	 */
	private function create_membership_plan_products_discount_rules( $plan, array $rules ) {

		// exclude products that grant access
		$access_products = $plan->get_product_ids();
		$product_names   = array_keys( $this->get_products_data() );
		$some_products   = array_rand( array_combine( $product_names, $product_names ), mt_rand( 1, 20 ) );

		foreach ( $some_products as $product_name ) {

			$product = $this->get_product( $product_name );

			if ( $product && ! in_array( $product->get_id(), $access_products, false ) ) {

				$rule = new \WC_Memberships_Membership_Plan_Rule( array(
					'id'                 => uniqid( 'rule_', false ),
					'membership_plan_id' => $plan->get_id(),
					'rule_type'          => 'purchasing_discount',
					'content_type'       => 'post_type',
					'content_type_name'  => 'product',
					'object_ids'         => array( $product->get_id() ),
				) );

				$price    = $product->get_price();
				$discount = is_numeric( $price ) && $price > 0 ? mt_rand( 0, (float) $price ) : 0;

				if ( $discount > 0 ) {

					// randomly set the discount to be fixed or percentage
					if ( 1 === mt_rand( 0, 1 ) ) {
						$discount .= '%';
					}

					$rule->set_discount( $discount );

					$rules[] = $rule;
				}
			}
		}

		return $rules;
	}


	/**
	 * Creates product access rules for a membership plan.
	 *
	 * @since 1.0.0
	 *
	 * @param \WC_Memberships_Membership_Plan|\WC_Memberships_Integration_Subscriptions_User_Membership $plan plan object
	 * @param \WC_Memberships_Membership_Plan_Rule[] array of rules (default empty array as there are no rules yet)
	 * @return \WC_Memberships_Membership_Plan_Rule[] updated rules
	 */
	private function create_membership_plan_content_access_rules( \WC_Memberships_Membership_Plan $plan, array $rules ) {

		$post_names = array_keys( $this->get_posts_data() );
		$some_posts = array_rand( array_combine( $post_names, $post_names ), mt_rand( 1, 20 ) );

		foreach ( $some_posts as $post_name ) {

			if ( $post = $this->get_post( $post_name ) ) {

				$rules[] = new \WC_Memberships_Membership_Plan_Rule( array(
					'id'                 => uniqid( 'rule_', false ),
					'membership_plan_id' => $plan->get_id(),
					'rule_type'          => 'content_restriction',
					'content_type'       => 'post_type',
					'content_type_name'  => 'post',
					'object_ids'         => array( $post->ID ),
				) );
			}
		}

		return $rules;
	}


	/**
	 * Returns posts data for post generation.
	 *
	 * @since 1.0.0
	 *
	 * @return array associative array of post names and post data
	 */
	private function get_posts_data() {

		$posts_data = array();

		foreach ( range( 'A', 'Z' ) as $letter ) {

			$posts_data[ 'sample-post-' . strtolower( $letter ) ] = array(
				/* translators: Placeholder: %s - alphabet letter */
				'post_title' => sprintf( esc_html__( 'Sample Post %s', 'woocommerce-dev-helper' ), strtoupper( $letter ) ),
			);
		}

		return $posts_data;
	}


	/**
	 * Generates random text content.
	 *
	 * @since 1.0.0
	 *
	 * @return string HTML
	 */
	private function generate_post_content() {

		$delimiter = "\n\n";
		$content   = explode( $delimiter,
			'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Etiam et fermentum dui. Ut orci quam, ornare sed lorem sed, hendrerit auctor dolor. Nulla viverra, nibh quis ultrices malesuada, ligula ipsum vulputate diam, aliquam egestas nibh ante vel dui. Sed in tellus interdum eros vulputate placerat sed non enim. Pellentesque eget justo porttitor urna dictum fermentum sit amet sed mauris. Praesent molestie vestibulum erat ac rhoncus. Aenean nunc risus, accumsan nec ipsum et, convallis sollicitudin dui. Proin dictum quam a semper malesuada. Etiam porta sit amet risus quis porta. Nulla facilisi. Cras at interdum ante. Ut gravida pharetra ligula vitae malesuada. Sed eget libero et arcu tempor tincidunt in ac lectus. Maecenas vitae felis enim. In in tellus consequat, condimentum eros vitae, lacinia risus. Sed vehicula sem sed risus volutpat elementum.' . "\n\n" .
			'Nunc accumsan tempus nunc ac aliquet. Integer non ullamcorper eros, in rutrum velit. Proin cursus orci sit amet lobortis iaculis. Praesent condimentum eget felis ut laoreet. Aliquam sodales dolor id mi iaculis, non fermentum leo viverra. Aenean aliquet condimentum placerat. Aenean aliquet diam arcu. Curabitur ac ligula sem. Mauris tincidunt mauris at ligula tincidunt interdum. Vestibulum ante ipsum primis in faucibus orci luctus et ultrices posuere cubilia Curae; Phasellus sagittis, eros ut iaculis varius, lorem nibh ullamcorper sapien, nec posuere justo massa quis ligula. Curabitur eleifend quis sapien egestas tincidunt. Nulla ornare, purus eget porttitor facilisis, lorem urna semper erat, non placerat orci est lobortis mi. Curabitur convallis, urna a tincidunt accumsan, lectus orci dictum turpis, vitae pretium leo tellus a sem. Donec vulputate erat quis turpis luctus, at aliquam massa vulputate.' . "\n\n" .
			'Phasellus vestibulum, purus in vestibulum tempor, est ligula rutrum justo, hendrerit malesuada diam lacus quis massa. Ut fringilla fringilla mattis. Aenean nisl lectus, tempor et sapien at, venenatis tempus magna. Integer sollicitudin rhoncus augue vel pretium. Etiam nisl velit, condimentum at facilisis sagittis, vehicula a diam. Phasellus congue vehicula nisi, a vulputate augue suscipit non. Etiam condimentum placerat arcu a dapibus. Phasellus adipiscing, est vel aliquet placerat, justo lacus commodo nunc, nec pretium arcu mi nec risus. Praesent a urna semper, suscipit tellus ac, consectetur metus. Integer at fringilla magna, ut gravida lorem. Sed molestie non augue in faucibus. Phasellus at dui sem. Morbi rutrum nulla sit amet elit dapibus tincidunt.' . "\n\n" .
			'Vestibulum varius ultrices mauris eget eleifend. Morbi sagittis nisi nec leo mollis, sed laoreet mi facilisis. Curabitur non laoreet turpis. Vivamus tincidunt orci turpis, et sodales urna egestas ut. Vestibulum eget congue ligula. Quisque leo tortor, tristique in fermentum ac, imperdiet in nibh. Integer mattis porta varius. Duis rhoncus mattis orci id pharetra. Proin mauris augue, venenatis id fringilla quis, bibendum et ligula. Sed at lacinia quam. In ac quam feugiat, lobortis nunc eu, fermentum metus.' . "\n\n" .
			'Fusce congue consectetur arcu at dignissim. Fusce euismod mauris et leo suscipit, sed rhoncus felis tincidunt. Suspendisse eu rutrum lorem, non feugiat felis. Sed at adipiscing lectus, vel fermentum metus. Donec auctor quis sapien vitae porta. Suspendisse non tempor nisi, sed egestas orci. Suspendisse elementum ullamcorper fermentum. Etiam pellentesque venenatis ipsum, id convallis tortor molestie quis. Maecenas mollis, orci ac luctus adipiscing, sem eros ullamcorper turpis, sed pharetra mi ligula sit amet neque. Duis non imperdiet lorem. Nullam feugiat risus vel risus vulputate, vel adipiscing nibh ullamcorper.' . "\n\n" .
			'Suspendisse vitae interdum augue. Donec mauris diam, bibendum vitae malesuada et, laoreet in justo. Duis sollicitudin tincidunt mattis. Etiam non enim id nunc dapibus rhoncus eget ut tellus. Donec eu libero at leo porttitor dignissim. Mauris lobortis et orci eu suscipit. Cras fringilla ante nec ipsum aliquam tempus. Nunc in dapibus tellus. Maecenas cursus semper turpis quis pharetra. Phasellus ultrices nisi id dui facilisis varius.' . "\n\n" .
			'Morbi sit amet enim dui. Sed non iaculis velit. Nunc quis augue laoreet, dignissim justo ut, convallis ante. Ut ut mollis lorem. Integer aliquam, magna sed pulvinar luctus, diam enim pulvinar mauris, eu malesuada orci lacus sit amet erat. Duis accumsan nunc eget velit congue, eu aliquet velit venenatis. Aenean pulvinar ultrices lorem et malesuada. Curabitur interdum ut odio et consequat. Nunc lobortis erat vel auctor ullamcorper. Nam ut felis lectus.' . "\n\n"
		);

		return wpautop( implode( $delimiter, array_slice( $content, 0, mt_rand( 1, count( $content ) ) ) ) );
	}


	/**
	 * Returns post data for a post name.
	 *
	 * @since 1.0.0
	 *
	 * @param string $which_post post name identifier
	 * @return array|null
	 */
	private function get_post_data( $which_post ) {

		$posts_data = $this->get_posts_data();
		$post_name  = $this->remove_prefix( $which_post );

		return isset( $posts_data[ $post_name ] ) ? $posts_data[ $post_name ] : null;
	}


	/**
	 * Returns a post, existing or new.
	 *
	 * @since 1.0.0
	 *
	 * @param string $which_post post name, to check if post exists already and fetch that
	 * @return null|\WP_Post
	 */
	private function get_post( $which_post ) {

		$posts = get_posts( array(
			'name'           => $this->add_prefix( $which_post ),
			'post_type'      => 'post',
			'posts_per_page' => 1,
		) );

		$post = ! empty( $posts[0] ) ? $posts[0] : $this->create_post( $which_post );

		return $post instanceof \WP_Post ? $post : null;
	}


	/**
	 * Creates a post.
	 *
	 * @since 1.0.0
	 *
	 * @param string $which_post chosen post to create
	 * @return null|\WP_Post
	 */
	private function create_post( $which_post ) {

		$post = null;

		if ( $post_data = $this->get_post_data( $which_post ) ) {

			$post_id = wp_insert_post( wp_parse_args( $post_data, array(
				'post_name'    => $this->add_prefix( $which_post ),
				'post_author'  => get_current_user_id(),
				'post_content' => $this->generate_post_content(),
				'post_type'    => 'post',
				'post_status'  => 'publish',
			) ) );

			if ( $post_id > 0 ) {
				$post = get_post( $post_id );
			}
		}

		return $post instanceof \WP_Post ? $post : null;
	}


	/**
	 * Returns a product for use by the generator, creates one if doesn't exist.
	 *
	 * @since 1.0.0
	 *
	 * @param string $which_product the product slug
	 * @return null|\WC_Product
	 */
	private function get_product( $which_product ) {

		$product = null;

		if ( $product_data = $this->get_product_data( $which_product ) ) {

			$product_posts = get_posts( array(
				'name'           => $this->add_prefix( $which_product ),
				'post_type'      => 'product',
				'post_status'    => 'any',
				'posts_per_page' => 1,
			) );

			if ( is_array( $product_posts ) && isset( $product_posts[0] ) ) {
				$product = wc_get_product( $product_posts[0] );
			} else {
				$product = $this->create_product( $which_product );
			}
		}

		return $product instanceof \WC_Product ? $product : null;
	}


	/**
	 * Creates a product for use by the generator.
	 *
	 * @since 1.0.0
	 *
	 * @param string $which_product product data to retrieve
	 * @return null|\WC_Product
	 */
	private function create_product( $which_product ) {

		$product      = null;
		$product_slug = $this->add_prefix( $which_product );
		$product_data = $this->get_product_data( $which_product );

		if ( isset( $product_data['post_title'] ) ) {

			$product_id = wp_insert_post( array(
				'post_author' => get_current_user_id(),
				'post_type'   => 'product',
				'post_status' => 'publish',
				'post_name'   => sanitize_text_field( $product_slug ),
				'post_title'  => sanitize_text_field( $product_data['post_title'] ),
			) );

			if ( is_numeric( $product_id ) ) {

				$product    = new \WC_Product_Simple( $product_id );
				$reg_price  = isset( $product_data['regular_price'] ) ? max( 0, (float) $product_data['regular_price'] ): 0;
				$sale_price = isset( $product_data['sale_price'] ) && is_numeric( $product_data['sale_price'] ) ? max( 0, (float) $product_data['sale_price'] ) : null;

				$product->set_regular_price( $reg_price );

				if ( null !== $sale_price ) {
					$product->set_sale_price( $sale_price );
				}

				$product->set_price( is_numeric( $sale_price ) && $sale_price < $reg_price ? $sale_price : $reg_price );

				$product->save();
				$product->save_meta_data();
			}
		}

		return $product;
	}


	/**
	 * Returns product data used by the generator.
	 *
	 * @since 1.0.0
	 *
	 * @param string $which_product product slug
	 * @return array|null
	 */
	private function get_product_data( $which_product ) {

		$product = $this->remove_prefix( $which_product );
		$data    = $this->get_products_data();

		return ! empty( $data[ $product ] ) ? $data[ $product ] : null;
	}


	/**
	 * Returns data for products to be created in bulk.
	 *
	 * @since 1.0.0
	 *
	 * @return array
	 */
	private function get_products_data() {

		$products_data = array();

		foreach ( range( 'A', 'Z' ) as $letter ) {

			$products_data[ 'sample-product-' . strtolower( $letter ) ] = array(
				'post_title'    => sprintf( esc_html__( 'Sample Product %s', 'woocommerce-dev-helper' ), strtoupper( $letter ) ),
				'regular_price' => (float) ( mt_rand( 0, 100 ) . '.' . mt_rand( 0, 99 ) ),
			);
		}

		return $products_data;
	}


	/**
	 * Records newly created objects to the job.
	 *
	 * This allows to save them to an option when the job has completed and let the bulk destroyer eliminate them when engaged.
	 *
	 * @since 1.0.0
	 *
	 * @param \WC_Memberships_Membership_Plan|\WC_Memberships_Integration_Subscriptions_Membership_Plan $membership_plan plan object
	 * @param \stdClass $job background job object
	 * @return \stdClass modified job
	 */
	private function record_objects_ids( $membership_plan, $job ) {

		// store the membership plan's own ID
		$job = $this->record_object_id( $job, 'plans', $membership_plan->get_id() );

		// add products that grant access
		foreach ( $membership_plan->get_product_ids() as $product_id ) {
			$job = $this->record_object_id( $job, 'products', $product_id );
		}

		// add posts and products created from plan rules
		foreach ( $membership_plan->get_rules() as $rule ) {

			$content_type_name = $rule->get_content_type_name();

			// TODO record taxonomy terms (categories, product cats...) {FN 2018-09-17}

			foreach ( $rule->get_object_ids() as $object_id ) {
				if ( 'post' === $content_type_name ) {
					$job = $this->record_object_id( $job, 'posts', $object_id );
				} elseif ( 'product' === $content_type_name ) {
					$job = $this->record_object_id( $job, 'products', $object_id );
				}
			}
		}

		return $job;
	}


	/**
	 * Adds an ID record to the job.
	 *
	 * @see Bulk_Generator::get_objects_keys() for a list of valid keys
	 *
	 * @since 1.0.0
	 *
	 * @param null|\stdClass $job job object
	 * @param string $key job property
	 * @param int $id WordPress object ID
	 * @return null|\stdClass
	 */
	private function record_object_id( $job, $key, $id ) {

		if ( null !== $job && isset( $job->objects ) && is_numeric( $id ) && (int) $id > 0 && in_array( $key, $this->get_objects_keys(), true ) ) {

			if ( ! isset( $job->objects[ $key ] ) ) {
				$job->objects[ $key ] = array();
			} else {
				$job->objects[ $key ] = (array) $job->objects[ $key ];
			}

			if ( ! in_array( (int) $id, (array) $job->objects[ $key ], true ) ) {
				$job->objects[ $key ][] = (int) $id;
			}
		}

		return $job;
	}


	/**
	 * Adds a prefix to a string.
	 *
	 * @since 1.0.0
	 *
	 * @param string $slug a string which may already include a prefix, or not
	 * @return string
	 */
	private function add_prefix( $slug ) {

		return 0 !== strpos( $slug, $this->prefix ) ? "{$this->prefix}_{$slug}" : $slug;
	}


	/**
	 * Removes a prefix from a string.
	 *
	 * @since 1.0.0
	 *
	 * @param string $slug a string which may or may not include the prefix already
	 * @return string
	 */
	private function remove_prefix( $slug ) {

		return 0 === strpos( $slug, "{$this->prefix}_" ) ? substr( $slug, strlen( "{$this->prefix}_" ) ) : $slug;
	}


}
